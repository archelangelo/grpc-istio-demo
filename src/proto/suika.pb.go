// Code generated by protoc-gen-go. DO NOT EDIT.
// source: suika.proto

package demo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_cba2ee73253506d2, []int{0}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Document struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_cba2ee73253506d2, []int{1}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Document) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Document) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Id)(nil), "demo.Id")
	proto.RegisterType((*Document)(nil), "demo.Document")
}

func init() { proto.RegisterFile("suika.proto", fileDescriptor_cba2ee73253506d2) }

var fileDescriptor_cba2ee73253506d2 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0xcd, 0xcc,
	0x4e, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x49, 0xcd, 0xcd, 0x57, 0x12, 0xe1,
	0x62, 0xf2, 0x4c, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x62, 0xca, 0x4c, 0x51, 0xf2, 0xe2, 0xe2, 0x70, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd, 0x2b, 0x11,
	0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x85, 0xca, 0x82, 0xd9, 0x42, 0x02, 0x5c, 0xcc, 0x89,
	0xe9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x20, 0xa6, 0x90, 0x04, 0x17, 0x7b, 0x62,
	0x4a, 0x4a, 0x51, 0x6a, 0x71, 0xb1, 0x04, 0x33, 0x58, 0x21, 0x8c, 0x6b, 0xa4, 0xcb, 0xc5, 0x1a,
	0x0c, 0xb2, 0x56, 0x48, 0x85, 0x8b, 0xcd, 0x27, 0x3f, 0x3f, 0xbb, 0xb4, 0x40, 0x88, 0x43, 0x0f,
	0x64, 0xb7, 0x9e, 0x67, 0x8a, 0x14, 0x1f, 0x84, 0x05, 0xb3, 0x4c, 0x89, 0x21, 0x89, 0x0d, 0xec,
	0x3a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x7f, 0xfe, 0x27, 0xac, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SuikaClient is the client API for Suika service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SuikaClient interface {
	Lookup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Document, error)
}

type suikaClient struct {
	cc *grpc.ClientConn
}

func NewSuikaClient(cc *grpc.ClientConn) SuikaClient {
	return &suikaClient{cc}
}

func (c *suikaClient) Lookup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/demo.Suika/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuikaServer is the server API for Suika service.
type SuikaServer interface {
	Lookup(context.Context, *Id) (*Document, error)
}

// UnimplementedSuikaServer can be embedded to have forward compatible implementations.
type UnimplementedSuikaServer struct {
}

func (*UnimplementedSuikaServer) Lookup(ctx context.Context, req *Id) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}

func RegisterSuikaServer(s *grpc.Server, srv SuikaServer) {
	s.RegisterService(&_Suika_serviceDesc, srv)
}

func _Suika_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuikaServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Suika/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuikaServer).Lookup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suika_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Suika",
	HandlerType: (*SuikaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _Suika_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suika.proto",
}
