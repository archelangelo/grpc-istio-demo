// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping-pong.proto

package demo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ping struct {
	Ping                 string   `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_62311b0d1f5d3673, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type Pong struct {
	Pong                 string   `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_62311b0d1f5d3673, []int{1}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "demo.Ping")
	proto.RegisterType((*Pong)(nil), "demo.Pong")
}

func init() { proto.RegisterFile("ping-pong.proto", fileDescriptor_62311b0d1f5d3673) }

var fileDescriptor_62311b0d1f5d3673 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x89, 0x0c, 0x65, 0x1a, 0x41, 0xe5, 0x81, 0x58, 0xa3, 0xa0, 0xcc, 0xaa, 0x08, 0x4e,
	0x44, 0x77, 0x82, 0x0b, 0x51, 0x41, 0x57, 0x8a, 0x3d, 0x41, 0x9c, 0x09, 0x69, 0x18, 0xe7, 0xbd,
	0xa1, 0x93, 0x59, 0x95, 0x6e, 0xbc, 0x82, 0x47, 0xeb, 0x15, 0x3c, 0x88, 0xbc, 0x44, 0xb1, 0x1b,
	0x77, 0x7f, 0xf8, 0xff, 0xef, 0x23, 0x3c, 0xb9, 0xdb, 0x79, 0x74, 0xe7, 0x1d, 0xa1, 0x2b, 0xbb,
	0x05, 0x05, 0x82, 0xac, 0xb6, 0x2d, 0xa9, 0x63, 0x47, 0xe4, 0xde, 0xad, 0x36, 0x9d, 0xd7, 0x06,
	0x91, 0x82, 0x09, 0x9e, 0xb0, 0x4f, 0x1b, 0xb5, 0xdd, 0x0f, 0xbe, 0x31, 0xe9, 0x51, 0x28, 0x99,
	0xbd, 0x78, 0x74, 0x00, 0x32, 0x63, 0xd7, 0x44, 0x9c, 0x8a, 0xe9, 0xf8, 0x35, 0xe6, 0xd8, 0xd1,
	0x4f, 0x47, 0x1b, 0x1d, 0xa1, 0xbb, 0x5c, 0x0b, 0x99, 0x33, 0x18, 0x07, 0xb7, 0x72, 0x34, 0x0b,
	0x0b, 0x6b, 0x5a, 0x90, 0x25, 0x7f, 0xa0, 0xe4, 0x46, 0xfd, 0x66, 0x42, 0x57, 0x1c, 0x7d, 0xac,
	0xbf, 0x3e, 0xb7, 0xf6, 0x8b, 0x3d, 0xcd, 0x66, 0x36, 0xe8, 0x3e, 0x12, 0xd7, 0xe2, 0x6c, 0x2a,
	0x2e, 0x04, 0xdc, 0xc8, 0xf1, 0x6c, 0x6e, 0x1a, 0xfb, 0x68, 0xb0, 0xfe, 0xd7, 0x32, 0x89, 0x16,
	0x80, 0x0d, 0xcb, 0x92, 0xd3, 0x0a, 0x1e, 0x64, 0x7e, 0x37, 0xb7, 0x55, 0xf3, 0x3c, 0x04, 0xc8,
	0x13, 0xf1, 0x54, 0xab, 0x9d, 0x94, 0xee, 0xa9, 0x1a, 0x5a, 0x8b, 0xa1, 0x38, 0x89, 0xfc, 0x21,
	0x1c, 0xfc, 0xf1, 0x15, 0x53, 0x34, 0x04, 0xbd, 0xf4, 0xf5, 0xea, 0x6d, 0x14, 0x8f, 0x72, 0xf5,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x50, 0xbc, 0xe7, 0xe1, 0x58, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingPongClient is the client API for PingPong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingPongClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (PingPong_StreamClient, error)
	ShakeHand(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	CheckOut(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Document, error)
}

type pingPongClient struct {
	cc *grpc.ClientConn
}

func NewPingPongClient(cc *grpc.ClientConn) PingPongClient {
	return &pingPongClient{cc}
}

func (c *pingPongClient) Stream(ctx context.Context, opts ...grpc.CallOption) (PingPong_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingPong_serviceDesc.Streams[0], "/demo.PingPong/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingPongStreamClient{stream}
	return x, nil
}

type PingPong_StreamClient interface {
	Send(*Ping) error
	Recv() (*Pong, error)
	grpc.ClientStream
}

type pingPongStreamClient struct {
	grpc.ClientStream
}

func (x *pingPongStreamClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingPongStreamClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingPongClient) ShakeHand(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/demo.PingPong/ShakeHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingPongClient) CheckOut(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/demo.PingPong/CheckOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingPongServer is the server API for PingPong service.
type PingPongServer interface {
	Stream(PingPong_StreamServer) error
	ShakeHand(context.Context, *Ping) (*Pong, error)
	CheckOut(context.Context, *Id) (*Document, error)
}

// UnimplementedPingPongServer can be embedded to have forward compatible implementations.
type UnimplementedPingPongServer struct {
}

func (*UnimplementedPingPongServer) Stream(srv PingPong_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedPingPongServer) ShakeHand(ctx context.Context, req *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShakeHand not implemented")
}
func (*UnimplementedPingPongServer) CheckOut(ctx context.Context, req *Id) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOut not implemented")
}

func RegisterPingPongServer(s *grpc.Server, srv PingPongServer) {
	s.RegisterService(&_PingPong_serviceDesc, srv)
}

func _PingPong_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingPongServer).Stream(&pingPongStreamServer{stream})
}

type PingPong_StreamServer interface {
	Send(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type pingPongStreamServer struct {
	grpc.ServerStream
}

func (x *pingPongStreamServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingPongStreamServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingPong_ShakeHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).ShakeHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.PingPong/ShakeHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).ShakeHand(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingPong_CheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPongServer).CheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.PingPong/CheckOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPongServer).CheckOut(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _PingPong_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.PingPong",
	HandlerType: (*PingPongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShakeHand",
			Handler:    _PingPong_ShakeHand_Handler,
		},
		{
			MethodName: "CheckOut",
			Handler:    _PingPong_CheckOut_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _PingPong_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ping-pong.proto",
}
